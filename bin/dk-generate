#!/usr/bin/env python2

import sys, optparse

import deploymentkit
import deploymentkit.core
from deploymentkit.core.generator import Generator
from deploymentkit.core.target import Target
from deploymentkit.core.recipe import PackageRecipe, TargetRecipe, PackageMetadata

def target_help_string():
    supported = Generator.supported_targets()
    supported_str = ", ".join([str(i) for i in supported])
    return "Target platform to generate for. Supported values: %s" % supported_str


if __name__ == '__main__':

    parser = optparse.OptionParser(usage="Usage: %prog [options] FILE.yaml")
    parser.add_option("-t", "--target", dest="target", default="",
                      help=target_help_string(), metavar="TARGET")
    parser.add_option("-o", "--output-directory", dest="output_dir", default="./",
                      help="Directory to output generated files to", metavar="DIR")
    parser.add_option("", "--help-input", action="store_true",
                      help="Show help about input file format")

    (options, args) = parser.parse_args()

    if options.help_input:
        parser.print_usage()
        print PackageMetadata.__doc__

    else:
        if len(args) < 1:
            parser.error("No input file specified")
        elif len(args) > 1:
            parser.error("Too many arguments")

        input_file = args[0]
        
        generic_recipe = PackageRecipe()
        generic_recipe.load_from_file(input_file)
        
        target = Target()
        if options.target:
            target.from_string(options.target)
        else:
            # FIXME: unhardcode, move into target
            # Introduce a way of getting the default target automatically
            target.from_string("gnulinux-archlinux-current-x86_64")

        generator = Generator()
        target_recipe = generator.generate_target_recipe(generic_recipe, target)
        target_recipe.write_to_directory(options.output_dir)

